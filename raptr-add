#!/usr/bin/env bash
set -e
script_name="$(basename "$BASH_SOURCE")"
script_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

while [[ "$#" > 0 ]]; do
	case "$1" in
		-t|--target|--target=) raw_target="$2"; shift ;; # TODO: allow multiple targets
		-p|--package|--package=) raw_package="$2"; shift ;;
		*) shift ;;
	esac
done

function assert_working_directory() {
	[ ! -d ./dists ] && echo "The command must be executed inside of an active repository." >&2 && return 1
	[ ! -d ./pool ] && echo "The command must be executed inside of an active repository." >&2 && return 1
	return 0
}
function assert_arguments() {
	[ -z "$1" ] && echo "Missing required target to which package should be added." >&2 && return 1
	[ -z "$2" ] && echo "Missing required package to add." >&2 && return 1
	return 0
}
function expand_target() {
	local available_targets="$(cd dists; find . -mindepth 2 -maxdepth 2 -type d | \
		sed -r 's/\.\/(.*?)/\1 /g' | tr '\n' ' ')"
	local target_input="$1"

	# TODO: avoid * expansion but allow looping (use IFS?)
	for t in "${target_input}"; do
		if [ "${t}" == "*/*" ] || [ "${t}" == "*" ]; then echo -n "${available_targets} "
		elif [[ " ${available_targets} " == *" ${t} "* ]]; then echo -n "${t} "
		elif [[ "${t}" == "*/"* ]]; then echo -n "$(expand_target_prefix "${t:2}")"
		elif [[ "${t}" == *"/*" ]]; then echo -n "$(expand_target_suffix "${t:0:-2}")"
		fi
	done
	
	return 0
}
function expand_target_prefix() {
	local available_archives="$(cd dists; ls -d * | tr '\n' ' ')"
	local section="$1"

	[ -z "${section}" ] && echo "The specified section '${section}' does not exist." >&2 && return 1
	for archive in ${available_archives}; do
		[ ! -d "dists/${archive}/${section}" ] && \
			echo "The specified section '${section}' does not exist." >&2 && return 1
		echo -n "${archive}/${section} "
	done

	return 0
}
function expand_target_suffix() {
	local available_sections="$(cd pool; ls -d * | tr '\n' ' ' )"
	local archive="$1"

	[ -z "${archive}" ] && echo "The specified archive '${archive}' does not exist." >&2 && return 1
	for section in ${available_sections}; do
		[ ! -d "dists/${archive}/${section}" ] && \
			echo "The specified archive '${archive}' does not exist." >&2 && return 1
		echo -n "${archive}/${section} "
	done
	
	return 0
}
function generate_package_indexes() {
	local package="$1"
	local targets="$2"

	[ -n "${targets}" ] && echo "Targets: ${targets}"
	[ -z "${targets}" ] && echo "There are no targets." >&2 && return 1

	for t in ${targets}; do
		local archive="${t%/*}"
		local section="${t#*/}"
		index_package "${package}" "${archive}" "${section}"
	done

	return 0
}
function index_package() {
	local package_path="$1"
	local package_extension="${package_path##*.}"

	if [[ "${package_path}" == *"/*" ]]; then index_package_directory "$@"
	elif [ -d "${package_path}" ]; then index_package_directory "$@"
	elif [ "${package_extension}" == "deb" ]; then index_binary_package "$@"
	elif [ "${package_extension}" == "dsc" ]; then index_source_package "$@"
	else echo "Could not determine package contents; make sure it's a 'deb' or 'dsc' file." >&2 && return 1
	fi

	return 0
}
function index_package_directory() {
	local package_path="$1"
	local filenames="$(ls "${package_path}")"

	[ -z "${filenames}" ] && \
		echo "The directory '${package_path}' does not exist or does not contain any files." >&2 && return 1

	for filename in ${package_path}; do
		local extension="${filename##*.}"
		[ "${extension}" != "deb" ] && [ "${extension}" != "dsc" ] && continue
		index_package "${filename}"
	done

	return 0
}
function index_source_package() {
	local package_path="$1"
	local archive="$2"
	local section="$3"

	[ ! -f "${package_path}" ] && echo "The binary package '${package_path}' does not exist." >&2 && return 1
	eval "$(extract_package_name_and_version "${package_path}")"

	return 0
}
function index_binary_package() {
	local package_path="$1"
	local archive="$2"
	local section="$3"

	[ ! -f "${package_path}" ] && echo "The binary package '${package_path}' does not exist." >&2 && return 1
	eval "$(extract_package_name_and_version "${package_path}")"

	local available_cpus="$(cd "dists/${archive}/${section}"; ls -d binary-* 2> /dev/null | \
		sed 's/binary-\(.*\)/\1/' | tr '\n' ' ' )"

	echo "Package name: ${package_name}"
	echo "Package version: ${package_version}"
	echo "Package CPU architecture: ${package_cpu}"

	if [ "${package_cpu}" == "all" ]; then
		for each_cpu in ${available_cpus};
			do index_binary_package_architecture "$@" "${package_name}" "${each_cpu}";
		done
	elif [[ ! " ${available_cpus} " == *" ${package_cpu} "* ]]; then
		echo "The package's target architecture is not supported; skipping" >&2 && return 0 # not an error
	else
		index_binary_package_architecture "$@" "${package_name}" "${package_cpu}"
	fi

	return 0
}
function extract_package_name_and_version() {
	local package_path="$1"
	local package_filename="$(basename "${package_path}")"
	local package_extension="${package_filename##*.}"
	local filename_without_extension="${package_filename%.*}"
	local package_meta=( $(echo "${filename_without_extension}" | tr "_" " ") )

	[ "${package_extension}" == "dsc" ] && \
		local source_filename="$(cat "${package_path}" | \
			sed -n 's/ [a-z0-9]\{32\} [0-9]\+ \(.*\)/\1/p' | tr "\n" " " )"

	cat <<-EOF
		local package_filename="${package_filename}"
		local package_name="${package_meta[0]}"
		local package_extension="${package_extension}"
		local package_version="${package_meta[1]}"
		local package_cpu="${package_meta[2]}"
		local source_filenames="${source_filenames}"
	EOF
}
function index_binary_package_architecture() {
	local package_path="$1"
	local package_filename="$(basename "${package_path}")"
	local archive="$2"
	local section="$3"
	local package_name="$4"
	local package_cpu="$5"

	local target_path="dists/${archive}/${section}"
	local content_filename="${target_path}/Contents-${arch}"

	local cpu_path="${target_path}/binary-${package_cpu}"
	local packages_index_path="$(readlink -m "${cpu_path}/Packages")"

	local pool_directory="pool/${section}/${package_name::1}/${package_name}"
	local workspace_root="/tmp/raptr/workspaces/$$"
	local workspace_path="${workspace_root}/${pool_directory}"

	echo "Adding '${package_name}' to '${cpu_path}'."

	[ -f "${packages_index_path}" ] && [ -n "$(grep "${package_filename}" "${packages_index_path}")" ] \
		&& echo "Binary package already added to target directory '${cpu_path}'; skipping." >&2 && return 0

	mkdir -p "${pool_directory}" "${workspace_path}"
	ln -s "$(readlink -m "${package_path}")" "${workspace_path}"
	$( cd "${workspace_root}"; dpkg-scanpackages "${pool_directory}" >> "${packages_index_path}" )
	gzip_and_bzip_file "${packages_index_path}"
	rm -rf "${workspace_root}"

	[ "$(readlink -m "${package_path}")" != "$(readlink -m "${pool_directory}/${package_filename}")" ] && \
		cp "${package_path}" "${pool_directory}"

	return 0
}
function gzip_and_bzip_file() {
	local uncompressed_file="$1"
	gzip -c9 "${uncompressed_file}" > "${uncompressed_file}.gz"
	bzip2 -c9 "${uncompressed_file}" > "${uncompressed_file}.bz2"
	return 0
}

assert_working_directory
assert_arguments "${raw_target}" "${raw_package}"
expanded_targets=$(expand_target "${raw_target}" )
generate_package_indexes "${raw_package}" "${expanded_targets}"

exit 0

##################################################################################################

[ -z "$(ls "${package}" 2> /dev/null)" ] && echo "The package to add '${package}' could not be found." && exit 1
filename="$(basename "${package}")"
package_name=$(echo "${filename}" | sed -n 's/\([A-Za-z0-9.-]\+\)_.*\.\(deb\|dsc\)/\1/p')
package_extension="${filename##*.}"
[ -z "${package_name}" ] && echo "The file specified package '${package}' doesn't appear to be a debian package." && exit 1

target_directory="dists/${archive}/${section}"
pool_directory="pool/${section}/${package_name::1}/${package_name}"
workspace_directory="workspace/${pool_directory}"
mkdir -p "${pool_directory}" "${workspace_directory}"

# TODO: what about architecture: all, e.g. bash and python scripts?

if [ "${package_extension}" == "deb" ]; then
	arch=$(basename "${package}" | sed -n 's/.*_.*_\([a-z0-9]\+\).\(deb\|dsc\)/\1/p')
	binary_directory="${target_directory}/binary-${arch}"
	packages_filename="${binary_directory}/Packages"
	content_filename="${target_directory}/Contents-${arch}"

	[ ! -d "${binary_directory}" ] \
		&& echo "Architecture '${arch}' does not exist in the repository." && exit 1

	[ -n "$(grep "${filename}" "${packages_filename}")" ] \
		&& echo "Binary package already added; skipping." && exit 0

	cp "${package}" "${workspace_directory}"
	$(cd workspace; dpkg-scanpackages "${pool_directory}" >> "../${packages_filename}")
	gzip_and_bzip_file "${packages_filename}"

	# TODO: read contents of deb file and append to Contents-$arch then sort by filename | unique

	mv "${workspace_directory}"/* "${pool_directory}"
	$(cd workspace; rmdir "${pool_directory}")
elif [ "${package_extension}" == "dsc" ]; then
	package_without_extension="${package%.*}"
	source_directory="${target_directory}/source"
	sources_filename="${source_directory}/Sources"

	[ ! -d "${source_directory}" ] \
		&& echo "Source architecture doesn't exist in the repository." && exit 1

	[ -n "$(grep "${filename}" "${sources_filename}")" ] \
		&& echo "Source package already added; skipping." && exit 0

	# TODO: copy associated files: typically packagename_version.orig.* (tar.gz, tar.bz2, etc.) and package (without extension).debian.tar.gz
	cp "${package_without_extension}".* "${workspace_directory}"
	gzip_and_bzip_file "${sources_filename}"
	$(cd workspace; dpkg-scansources "${pool_directory}" >> "../${sources_filename}")

	mv "${workspace_directory}"/* "${pool_directory}"
	$(cd workspace; rmdir "${pool_directory}")
fi

echo "Added Debian '${package_name}' package to '${section}' pool."
exit 0
