#!/usr/bin/env bash
set -e
script_name="$(basename "$BASH_SOURCE")"
script_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

while [[ "$#" > 0 ]]; do
  case "$1" in
    -t|--target|--target=) target="$2"; shift ;; # TODO: allow multiple targets
    -p|--package|--package=) package="$2"; shift ;;
	*) shift ;;
  esac
done

[ -z "${target}" ] && echo "Missing required target to which package should be added." && exit 1
[ -z "${package}" ] && echo "Missing required package to add." && exit 1
[ ! -d ./dists ] && echo "The command must be executed inside of an active repository." && exit 1
[ ! -d ./pool ] && echo "The command must be executed inside of an active repository." && exit 1

function gzip_and_bzip_file() {
	gzip -c9 "$1" > "$1.gz"
	bzip2 -c9 "$1" > "$1.bz2"
}

all_targets="$(cd dists; find . -mindepth 2 -maxdepth 2 -type d | sed -r 's/\.\/(.*?)/\1 /g' | tr '\n' ' ')"
all_archives="$(cd dists; ls -d * | tr '\n' ' ')"
all_sections="$(cd pool; ls -d * | tr '\n' ' ' )"

parsed_targets=""

# TODO: avoid * expansion but allow looping (use IFS?)
for t in "${target}"; do
	if [ "${t}" == "*/*" ] || [ "${t}" == "*" ]; then
		parsed_targets="${all_targets}"
	elif [[ "${t}" == "*/"* ]]; then
		section="${t:2}"
		[[ ! " ${all_sections} " == *" ${section} "* ]] || [ -z "${section}" ] \
			&& echo "The specified section '${section}' does not exist." && exit 1
		for archive in ${all_archives}; do parsed_targets="${parsed_targets} ${archive}/${section}"; done
	elif [[ "${t}" == *"/*" ]]; then
		archive="${t:0:-2}"
		[[ ! " ${all_archives} " == *" ${archive} "* ]] || [ -z "${archive}" ] \
			&& echo "The specified archive '${archive}' does not exist." && exit 1
		for section in ${all_sections}; do parsed_targets="${parsed_targets} ${archive}/${section}"; done
	fi
done

[ -z "${parsed_targets}" ] && echo "None of the targets specified exit." && exit 1
for p in ${parsed_targets}; do
	[ ! -d "dists/${p}" ] && echo "The specified target ${p} does not exist." && exit 1
	archive="${p%/*}"
	section="${p#*/}"

	# TODO: determine the package to add; it could be a:
	# 1. native source package
	# 2. non-native source package
	# 3. native, architecture-specific, binary package, e.g. pkg_1.0.0-1ubuntu1~asdf_amd64.deb
	# 4. non-native architecture-specific, binary package, e.g. pkg_1.0.0~asdf_i386.deb
	# 5. native, architecture-independent, binary package, e.g. pkg_1.0.0~asdf_all.deb
	# 6. non-native, architecture-independent, binary package, e.g. pkg_1.0.0-1ubuntu1~asdf_all.deb

	# TODO: what characters are allowed in the file version? plus characters?
done

exit 0

[ -z "$(ls "${package}" 2> /dev/null)" ] && echo "The package to add '${package}' could not be found." && exit 1
filename="$(basename "${package}")"
package_name=$(echo "${filename}" | sed -n 's/\([A-Za-z0-9.-]\+\)_.*\.\(deb\|dsc\)/\1/p')
package_extension=${filename##*.}
[ -z "${package_name}" ] && echo "The file specified package '${package}' doesn't appear to be a debian package." && exit 1

target_directory="dists/${archive}/${section}"
pool_directory="pool/${section}/${package_name::1}/${package_name}"
workspace_directory="workspace/${pool_directory}"
mkdir -p "${pool_directory}" "${workspace_directory}"

# TODO: what about architecture: all, e.g. bash and python scripts?

if [ "${package_extension}" == "deb" ]; then
	arch=$(basename "${package}" | sed -n 's/.*_.*_\([a-z0-9]\+\).\(deb\|dsc\)/\1/p')
	binary_directory="${target_directory}/binary-${arch}"
	packages_filename="${binary_directory}/Packages"
	content_filename="${target_directory}/Contents-${arch}"

	[ ! -d "${binary_directory}" ] \
		&& echo "Architecture '${arch}' does not exist in the repository." && exit 1

	[ -n "$(grep "${filename}" "${packages_filename}")" ] \
		&& echo "Binary package already added; skipping." && exit 0

	cp "${package}" "${workspace_directory}"
	$(cd workspace; dpkg-scanpackages "${pool_directory}" >> "../${packages_filename}")
	gzip_and_bzip_file "${packages_filename}"

	# TODO: read contents of deb file and append to Contents-$arch then sort by filename | unique

	mv "${workspace_directory}"/* "${pool_directory}"
	$(cd workspace; rmdir "${pool_directory}")
elif [ "${package_extension}" == "dsc" ]; then
	package_without_extension="${package%.*}"
	source_directory="${target_directory}/source"
	sources_filename="${source_directory}/Sources"

	[ ! -d "${source_directory}" ] \
		&& echo "Source architecture doesn't exist in the repository." && exit 1

	[ -n "$(grep "${filename}" "${sources_filename}")" ] \
		&& echo "Source package already added; skipping." && exit 0

	# TODO: copy associated files: typically packagename_version.orig.* (tar.gz, tar.bz2, etc.) and package (without extension).debian.tar.gz
	cp "${package_without_extension}".* "${workspace_directory}"
	gzip_and_bzip_file "${sources_filename}"
	$(cd workspace; dpkg-scansources "${pool_directory}" >> "../${sources_filename}")

	mv "${workspace_directory}"/* "${pool_directory}"
	$(cd workspace; rmdir "${pool_directory}")
fi

echo "Added Debian '${package_name}' package to '${section}' pool."
exit 0
