#!/usr/bin/env bash
set -e
script_name="$(basename "$BASH_SOURCE")"
script_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

while [[ "$#" > 0 ]]; do
  case "$1" in
    -t|--target|--target=) target="$2"; shift ;;
    -p|--package|--package=) package="$2"; shift ;;
	*) shift ;;
  esac
done

[ -z "$target" ] && echo "Missing required target to which package should be added." && exit 1
[ -z "$package" ] && echo "Missing required package to add." && exit 1
[ ! -d ./dists ] && echo "The command must be executed inside of an active repository." && exit 1
[ ! -d ./pool ] && echo "The command must be executed inside of an active repository." && exit 1

all_targets="$(cd dists; find . -mindepth 2 -maxdepth 2 -type d | sed -r 's/\.\/(.*?)/\1 /g' | tr '\n' ' ')"
all_distributions="$(cd dists; ls -d *) | tr '\n' ' '"
all_sections="$(cd pool; ls -d *) | tr '\n' ' '"

# TODO: wildcards
#[[ "$t" == "*/"* ]] && continue; # begins with */, grab the right side and find within all_sections
#[[ "$t" == *"/*" ]] && continue; # ends with /*, grab the left side and find within all_sections
[[ ! "$all_targets" == *"$target"* ]] && "The target '$t' does not exist." && exit 1
distribution="$(echo "$target" | sed -r 's/(.*)\/(.*)/\1/')"
section="$(echo "$target" | sed -r 's/(.*)\/(.*)/\2/')"

# TODO: maybe split apart on "_" ?
# get package name, version, architecture, and source/binary

[ -z "$(ls $package 2> /dev/null)" ] && echo "The package to add '$package' could not be found." && exit 1
package_name=$(basename "$package" | sed -n 's/\([A-Za-z0-9.-]\+\)_.*\.\(deb\|dsc\)/\1/p')
[ -z "$package_name" ] && echo "The file specified '$package' doesn't appear to be a debian package." && exit 1

echo "$package_version"
exit 0

mkdir -p "pool/$section/${package_name::1}/$package_name"

if [[ "$package" == *"deb" ]]; then
	arch=$(basename "$package" | sed -n 's/.*_.*_\([a-z0-9]\+\).\(deb\|dsc\)/\1/p')
	[ ! -d "dists/$distribution/$section/binary-$arch" ] \
		&& echo "Architecture '$arch' does not exist in the repository." && exit 1

	rm -rf workspace && mkdir -p workspace
	cp "$package" workspace
	dpkg-scanpackages workspace >> "dists/$distribution/$section/binary-$arch/Packages"
	# read contents and append to Contents-$arch then sort by filename | unique

	mv workspace/* "pool/$section/${package_name::1}/$package_name"
	rmdir workspace
else
	[ ! -d "dists/$distribution/$section/source" ] \
		&& echo "Source architecture doesn't exist in the repository." && exit 1

	# dpkg-scansources
fi

echo "Added Debian package '${package_name} to '$section' pool."
exit 0
